open import Data.Char using (Char ; _โ_)

data Ob : Set where
  ๐     : Ob
  _แบ_   : Ob โ Ob โ Ob
  -- _โ_   : Ob โ Ob โ Ob
  Lang  : Ob

variable A B C : Ob

data K : Ob โ Ob โ Set where

  -- ev       : K (A โ (B ร A)) B
  -- curry    : K (A ร B) C โ K A (B โ C)
  -- uncurry  : K A (B โ C) โ K (A ร B) C

  -- fork     : K A B โ K A C โ K A (B ร C)
  exl      : K (A แบ B) A
  exr      : K (A แบ B) B

  -- id       : K A A
  compose  : K B C โ K A B โ K A C

  โ        : K A Lang
  ฮต        : K A Lang
  _โช_      : K A Lang โ K A Lang โ K A Lang
  _โ_      : K A Lang โ K A Lang โ K A Lang
  `_       : Char โ K A Lang
  ฮผ        : K (Lang แบ A) Lang โ K A Lang

-- const : K ๐ (A โ (B โ A))
-- const = curry (compose (curry exl) exr)

expr : K ๐ Lang
expr = ฮผ ((` 'x') โช (exl โ ((` '+') โ exl)))

-- mutual recursion of expressions and statements
lang : K ๐ Lang
lang
  = ฮผ ((` 'x')
    โช ((exl โ ((` '+') โ exl))
    โช ((` '{') โ (ฮผ (((` '!') โ compose exl exr)
                    โช (exl โ ((` ';') โ exl)))
               โ (` '}')))))

open import Data.List
open import Data.Empty
open import Data.Unit hiding (_โ_)
open import Data.Sum
open import Data.Product
open import Relation.Binary.PropositionalEquality
open import Function

data ๐ : Setโ where
  one : ๐

String : Set
String = List Char

Obโฆ_โง : Ob โ Setโ
Obโฆ ๐ โง = ๐ 
Obโฆ o แบ oโ โง = Obโฆ o โง ร Obโฆ oโ โง
Obโฆ Lang โง = String โ Set

Kโฆ_โง : K A B โ Obโฆ A โง โ Obโฆ B โง

data Fix (ฯ : K (Lang แบ A) Lang) (x : Obโฆ A โง) (w : String) : Set where
  step : Kโฆ ฯ โง (Fix ฯ x , x) w โ Fix ฯ x w 

Kโฆ exl โง (ฯโ , ฯโ) = ฯโ 
Kโฆ exr โง (ฯโ , ฯโ) = ฯโ
Kโฆ compose ฯ ฯ โง x = Kโฆ ฯ โง (Kโฆ ฯ โง x)
Kโฆ โ โง _ _ = โฅ
Kโฆ ฮต โง _ w = w โก []
Kโฆ ฯ โช ฯ โง x w = Kโฆ ฯ โง x w โ Kโฆ ฯ โง x w
Kโฆ ฯ โ ฯ โง x w = โ[ u ] โ[ v ] w โก u ++ v ร Kโฆ ฯ โง x u ร Kโฆ ฯ โง x v
Kโฆ ` c โง x w = w โก c โท []
Kโฆ ฮผ ฯ โง x = Kโฆ ฯ โง (Fix ฯ x , x)

open import Relation.Nullary.Decidable as Dec
import Function.Properties.Equivalence as โ
open import Function.Bundles

Parser : (String โ Set) โ Set
Parser L = (w : String) โ Dec (L w)

_โ-parse_ : {P Q : String โ Set} โ Parser P โ Parser Q โ Parser (ฮป w โ โ[ u ] โ[ v ] w โก u ++ v ร P u ร Q v)
(ฯ โ-parse ฯ) [] = Dec.map (mkโ (ฮป x โ [] , [] , refl , x) (ฮป { ([] , [] , refl , x) โ x })) (ฯ [] ร-dec ฯ [])
(ฯ โ-parse ฯ) (c โท w) = Dec.map
  {!   !}
  ((ฯ [] ร-dec ฯ (c โท w)) โ-dec ((ฯ โ (c โท_)) โ-parse ฯ) w )

DecOb : โ o โ Obโฆ o โง โ Set
DecOb ๐ one = โค
DecOb (o แบ oโ) (ฯ , ฯ) = DecOb o ฯ ร DecOb oโ ฯ
DecOb Lang L = Parser L

parseK : (f : K A B) โ {x : Obโฆ A โง} โ DecOb A x โ DecOb B (Kโฆ f โง x)
parseK exl (x , _) = x
parseK exr (_ , x) = x
parseK (compose ฯ ฯ) x = parseK ฯ (parseK ฯ x)
parseK โ _ w = no ฮป ()
parseK ฮต _ [] = yes refl
parseK ฮต _ (_ โท _) = no ฮป ()
parseK (ฯ โช ฯ) x w = parseK ฯ x w โ-dec parseK ฯ x w
parseK (ฯ โ ฯ) x = parseK ฯ x โ-parse parseK ฯ x
parseK (` c) _ [] = no ฮป ()
parseK (` c) _ (x โท []) = Dec.map (mkโ (ฮป { refl โ refl }) ฮป { refl โ refl }) (c โ x)
parseK (` c) _ (_ โท _ โท _) = no ฮป ()
parseK (ฮผ ฯ) x = parseK ฯ ((ฮป w โ Dec.map (mkโ step (ฮป { (step x) โ x })) (parseK (ฮผ ฯ) x w)) , x)